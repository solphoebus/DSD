module vending(clk,rst,x,z,dc,an,sevseg);
input clk,rst;
 output  dc;
input [3:0] x;
output reg [1:0]z;
reg [3:0]prs;
reg [3:0]nex;
reg[28:0]clk_div;
reg clkd;
reg [3:0] dis;
output  [7:0] an;
output reg [0:6] sevseg;
always@(posedge clk,negedge rst)
begin
if(!rst)
clk_div<=0;
else
clk_div<=clk_div+1;
clkd<=clk_div[28];
end
assign dc=clkd;
//*always@(x)
//begin
//dis=1'b1*x[0]+2'b10*x[1]+3'b100*x[2];
//end

always@(prs,x)
begin
 case(prs)
 
  0:begin
 z<=00;
 dis<=4'b0000;
if(x==4'b0001)
nex<=1;  
else if(x==4'b0010)
nex<=2;
else if(x==4'b0100)
nex<=5;
else if(x==4'b1001)
nex<=6;
else if(x==4'b1010)
nex<=7;
else if(x==4'b1100)
nex<=10;
else
nex<=0;
end
1:begin
z<=00;
dis<=4'b0001;
if(x==4'b0001)
nex<=2;
else if(x==4'b0010)
nex<=3;
else
nex<=1;
end
2:begin
z<=00;
dis<=4'b0010;
if(x==4'b0001)
nex<=3;
else if(x==4'b0010)
nex<=4;
else
nex<=2;
end
3:begin
z<=10;
dis<=4'b0011;
nex<=0;
end
4:begin
z<=11;
dis<=4'b0100;
nex<=0;
end
5:begin
z<=01;
dis<=4'b0101;
nex<=4;
end
6:begin
z<=00;
dis<=4'b0001;
if(x==4'b1001)
nex<=7;
else if(x==4'b1010)
nex<=8;
else
nex<=6;
end
7:begin
z<=00;
dis<=4'b0010;
if(x==4'b1001)
nex<=8;
else if(x==4'b1010)
nex<=9;
else
nex<=7;
end
8:begin
dis<=4'b0011;
z<=00;
if(x==4'b1001)
nex<=9;
else if(x==4'b1010)
nex<=10;
else 
nex<=8;
end
9:begin
z<=10;
dis<=4'b0100;
nex<=0;
end
10:begin
z<=11;
dis<=4'b0101;
nex<=0;
end


default:begin
nex<=0;
end

endcase

end
always@(posedge clkd,negedge rst)
begin
if(!rst)
prs<=0;
else
prs<=nex;
end
 always@(dis)
    case (dis)
    0: sevseg = 7'b0000001;
    1:sevseg = 7'b1001111;
    2:sevseg=7'b0010010;
    3:sevseg=7'b0000110;
    4:sevseg=7'b1001100;
    5:sevseg=7'b0100100;
    6:sevseg=7'b0100000;
    7:sevseg=7'b0001111;
    8:sevseg=7'b0000000;
   9:sevseg=7'b0000100;
 10:sevseg=7'b0001000;
   11:sevseg=7'b1100000;
    12:sevseg=7'b0110001;
    13:sevseg=7'b1000010;
     14:sevseg=7'b0110000;
    15:sevseg=7'b0111000;

endcase
 
   assign an=8'b11111110;
endmodule
