module vending(
    input clk,
    input rst,
    input [3:0] x,          // Coin input (SW3-SW0 on Nexys 4 DDR)
    output reg [1:0] z,     // Product output indicator
    output dc,              // Divided clock signal
    output [7:0] an,        // Anodes for seven-segment display
    output reg [0:6] sevseg // Seven-segment display output
);
    reg [3:0] prs;          // Present state
    reg [3:0] nex;          // Next state
    reg [28:0] clk_div;     // Clock divider counter
    reg clkd;               // Divided clock
    reg [3:0] dis;          // Display value

    // Clock Divider
    always @(posedge clk or negedge rst) begin
        if (!rst)
            clk_div <= 0;
        else
            clk_div <= clk_div + 1;
        clkd <= clk_div[28];
    end
    assign dc = clkd;

    // State Machine Logic
    always @(prs, x) begin
        case (prs)
            // Initial state
            0: begin
                z <= 2'b00;
                dis <= 4'b0000;
                if (x == 4'b0001)       nex <= 1;   // Coin for Item A
                else if (x == 4'b0010)  nex <= 2;   // Coin for Item B
                else if (x == 4'b0100)  nex <= 5;   // Coin for Item C
                else nex <= 0;
            end
            // States for Item A (with product display)
            1: begin
                z <= 2'b00;
                dis <= 4'b0001; // Display "A"
                if (x == 4'b0001) nex <= 2;
                else nex <= 1;
            end
            2: begin
                z <= 2'b00;
                dis <= 4'b0010; // Display "A"
                if (x == 4'b0001) nex <= 3; // Selecting product A
                else nex <= 2;
            end
            3: begin
                z <= 2'b10;   // Product A delivered
                dis <= 4'b0001;  // Display "A"
                nex <= 0;
            end
            // States for Item B (with product display)
            5: begin
                z <= 2'b00;
                dis <= 4'b0001; // Display "B"
                if (x == 4'b1001) nex <= 6;
                else nex <= 5;
            end
            6: begin
                z <= 2'b00;
                dis <= 4'b0010; // Display "B"
                if (x == 4'b1001) nex <= 7; // Selecting product B
                else nex <= 6;
            end
            7: begin
                z <= 2'b10;    // Product B delivered
                dis <= 4'b0010; // Display "B"
                nex <= 0;
            end
            // States for Item C (with product display)
            11: begin
                z <= 2'b00;
                dis <= 4'b0001; // Display "C"
                if (x == 4'b0110) nex <= 12; // Selecting product C
                else nex <= 11;
            end
            12: begin
                z <= 2'b11;    // Product C delivered
                dis <= 4'b0011; // Display "C"
                nex <= 0;
            end
            default: begin
                nex <= 0;
            end
        endcase
    end

    // State Transition on Clock
    always @(posedge clkd or negedge rst) begin
        if (!rst)
            prs <= 0;
        else
            prs <= nex;
    end

    // Seven-Segment Display Control
    always @(dis)
        case (dis)
            0: sevseg = 7'b0000001;  // Display 0
            1: sevseg = 7'b1001111;  // Display "A"
            2: sevseg = 7'b0010010;  // Display "B"
            3: sevseg = 7'b0110000;  // Display "C"
            default: sevseg = 7'b1111111;  // Blank display
        endcase

    // Set only one anode active (AN0)
    assign an = 8'b11111110;

endmodule
