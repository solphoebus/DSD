module vending(clk, rst, x, z, dc, an, sevseg);
    input clk, rst;
    input [3:0] x;               // Input for product selection and coin insertion
    output dc;                   // Divided clock output
    output reg [1:0] z;          // Output indicating product status
    output [7:0] an;             // Anode signals for SSD
    output reg [0:6] sevseg;     // 7-segment display output

    reg [2:0] prs, nex;          // Present and next states
    reg [28:0] clk_div;          // Clock divider counter
    reg clkd;                    // Divided clock signal
    reg [3:0] dis;               // Display value for SSD

    // Clock Divider
    always @(posedge clk or negedge rst) begin
        if (!rst)
            clk_div <= 0;
        else
            clk_div <= clk_div + 1;
        clkd <= clk_div[28];
    end

    assign dc = clkd;

    // State Machine for two products
    always @(prs or x) begin
        case (prs)
            0: begin
                z <= 2'b00;
                dis <= 4'b0000;
                if (x == 4'b0001)
                    nex <= 1;
                else if (x == 4'b0010)
                    nex <= 2;
                else if (x == 4'b0100)
                    nex <= 5;
                else
                    nex <= 0;
            end
            1: begin
                z <= 2'b00;
                dis <= 4'b0001;
                if (x == 4'b0001)
                    nex <= 2;
                else if (x == 4'b0010)
                    nex <= 3;
                else
                    nex <= 1;
            end
            2: begin
                z <= 2'b00;
                dis <= 4'b0010;
                if (x == 4'b0001)
                    nex <= 3;
                else if (x == 4'b0010)
                    nex <= 4;
                else
                    nex <= 2;
            end
            3: begin
                z <= 2'b10;  // Product 1 selected and paid for
                dis <= 4'b0011;
                nex <= 0;
            end
            4: begin
                z <= 2'b11;  // Product 2 selected and paid for
                dis <= 4'b0100;
                nex <= 0;
            end
            5: begin
                z <= 2'b01;
                dis <= 4'b0101;
                nex <= 4;
            end
            default: begin
                z <= 2'b00;
                dis <= 4'b0000;
                nex <= 0;
            end
        endcase
    end

    // Update Present State on Clock
    always @(posedge clkd or negedge rst) begin
        if (!rst)
            prs <= 0;
        else
            prs <= nex;
    end

    // 7-Segment Display Logic
    always @(dis) begin
        case (dis)
            4'b0000: sevseg = 7'b0000001;
            4'b0001: sevseg = 7'b1001111;
            4'b0010: sevseg = 7'b0010010;
            4'b0011: sevseg = 7'b0000110;
            4'b0100: sevseg = 7'b1001100;
            4'b0101: sevseg = 7'b0100100;
            4'b0110: sevseg = 7'b0100000;
            4'b0111: sevseg = 7'b0001111;
            4'b1000: sevseg = 7'b0000000;
            4'b1001: sevseg = 7'b0000100;
            4'b1010: sevseg = 7'b0001000;
            4'b1011: sevseg = 7'b1100000;
            4'b1100: sevseg = 7'b0110001;
            4'b1101: sevseg = 7'b1000010;
            4'b1110: sevseg = 7'b0110000;
            4'b1111: sevseg = 7'b0111000;
            default: sevseg = 7'b1111111;
        endcase
    end

    assign an = 8'b11111110;
endmodule
